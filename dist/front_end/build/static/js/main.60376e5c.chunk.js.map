{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","emailEditorRef","useRef","useState","isLogin","setIsLogin","templates","setTemplates","user","setUser","editTemplate","setEditTemplate","useEffect","fetch","then","response","json","result","console","log","onlineAccessInfo","associated_user","id","get_templates","res","onClick","current","editor","loadBlank","exportHtml","data","design","html","method","headers","body","JSON","stringify","r","re","map","each","_id","loadDesign","ref","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60376e5c.chunk.js","sourcesContent":["import React, { useEffect ,useRef, useState } from 'react';\n\nimport EmailEditor from 'react-email-editor';\n\nfunction App() {\n  const emailEditorRef = useRef(null);\n\n  const [isLogin, setIsLogin] = useState(false)\n  const [templates, setTemplates] = useState([])\n  const [user, setUser] = useState('')\n  const [editTemplate, setEditTemplate] = useState(false)\n\n  useEffect(() => {\n    fetch('/api/session')\n      .then(response => response.json())\n      .then(result => {\n        console.log('result: ', result)\n        if (result === false) {\n        } else {\n          setIsLogin(true)\n          console.log('id: ', result.onlineAccessInfo.associated_user.id);\n          setUser(result.onlineAccessInfo.associated_user.id)\n          console.log('userid: ', user);\n          get_templates(result.onlineAccessInfo.associated_user.id);\n        }\n      })\n  }, [])\n\n  const get_templates = (id) => {\n    fetch('/api/get/' + id)\n      .then(res => res.json())\n      .then(result => {\n        console.log('templates: ', result)\n        setTemplates(result)\n      })\n  }\n\n  const exportHtml = () => {\n    emailEditorRef.current.editor.exportHtml((data) => {\n      const { design, html } = data;\n      //console.log('exportHtml', html);\n      console.log('design: ', design);\n      //design['user'] = user;\n      //console.log('export for user: ', user);\n      // fetch('/api/save/' + user, {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify(design)\n      // }).then(response => response.json())\n      //   .then(result => console.log('save'))\n\n      fetch('/api/save/' + user, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(design)\n      }).then(r => r.json())\n        .then(re => console.log('response for save: ', re))\n    });\n  };\n\n  const onLoad = (id) => {\n    // you can load your template here;\n    // const templateJson = {};\n    // emailEditorRef.current.editor.loadDesign(templateJson);\n\n    templates.map((each) => {\n      if (each._id === id) {\n        console.log('loading: ', each._id);\n        return emailEditorRef.current.editor.loadDesign(each)\n      }\n    })\n  };\n\n  const newLoad = () => {\n    emailEditorRef.current.editor.loadBlank()\n    setEditTemplate(false)\n  }\n\n  const editSaved = () => {\n    setEditTemplate(true)\n  }\n\n  const update = (id) => {\n    emailEditorRef.current.editor.exportHtml((data) => {\n      const { design } = data\n      console.log('updated template: ', design);\n      fetch('/api/update/' + id, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(design)\n    }).then(r => r.json())\n      .then(res => console.log('update result: ', res))\n    })\n    \n  }\n  \n  return (\n    <div>\n    {isLogin ? <div>\n      <div>\n        <button onClick={newLoad}>New Template</button>\n        <button onClick={editSaved}>Edit Saved Template</button>\n        <button onClick={exportHtml}>Save</button>\n      </div>\n      {editTemplate ?\n        <div>\n        Saved Templates\n        {templates.map((each) => {\n          return (\n            <div key={each._id}>\n              <button key={each._id} onClick={() => onLoad(each._id)}>Template {each._id}</button>\n              <button onClick={() => update(each._id)}>Update</button>\n            </div>\n          )\n        })}\n        \n      </div>\n        : \n        \n        <p></p>}\n      \n    <EmailEditor\n      ref={emailEditorRef}\n    />\n    </div>\n        :\n        <a href=\"/login\">Login</a>\n  }\n      \n\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}