{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","emailEditorRef","useRef","useState","isLogin","setIsLogin","templates","setTemplates","user","setUser","useEffect","fetch","then","response","json","result","console","log","onlineAccessInfo","associated_user","id","get_templates","res","onLoad","map","each","_id","current","editor","loadDesign","onClick","exportHtml","data","design","html","method","headers","body","JSON","stringify","ref","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAkGeA,MA9Ff,WACE,IAAMC,EAAiBC,iBAAO,MAE9B,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACRC,MAAM,gBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAI,WAAYF,IACT,IAAXA,IAEFV,GAAW,GACXW,QAAQC,IAAI,OAAQF,EAAOG,iBAAiBC,gBAAgBC,IAC5DX,EAAQM,EAAOG,iBAAiBC,gBAAgBC,IAChDJ,QAAQC,IAAI,WAAYT,GACxBa,WAKR,IAAMA,EAAgB,WACpBV,MAAM,YAAcH,GACjBI,MAAK,SAAAU,GAAG,OAAIA,EAAIR,UAChBF,MAAK,SAAAG,GACJC,QAAQC,IAAI,cAAeF,GAC3BR,EAAaQ,OAsBbQ,EAAS,SAACH,GAIdd,EAAUkB,KAAI,SAACC,IACTA,EAAKC,IAAMN,KACbJ,QAAQC,IAAI,YAAaQ,EAAKC,KAC9BzB,EAAe0B,QAAQC,OAAOC,WAAWJ,QAM/C,OACE,8BACCrB,EACC,gCACE,8BACE,wBAAQ0B,QApCG,WACjB7B,EAAe0B,QAAQC,OAAOG,YAAW,SAACC,GACxC,IAAQC,EAAiBD,EAAjBC,OAAiBD,EAATE,KAEhBlB,QAAQC,IAAI,WAAYgB,GAExBjB,QAAQC,IAAI,oBAAqBT,GACjCG,MAAM,aAAeH,EAAM,CACzB2B,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KACpBrB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIC,QAAQC,IAAI,eAsB1B,2BAEF,kDAEGX,EAAUkB,KAAI,SAACC,GACd,OACE,8BACE,yBAAQK,QAAS,kBAAMP,EAAOE,EAAKC,MAAnC,sBAAmDD,EAAKC,eAKlE,cAAC,IAAD,CACEc,IAAKvC,EACLsB,OAAQA,OAKR,mBAAGkB,KAAK,SAAR,kCC/EOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.788ca406.chunk.js","sourcesContent":["import React, { useEffect ,useRef, useState } from 'react';\n\nimport EmailEditor from 'react-email-editor';\n\nfunction App() {\n  const emailEditorRef = useRef(null);\n\n  const [isLogin, setIsLogin] = useState(false)\n  const [templates, setTemplates] = useState([])\n  const [user, setUser] = useState('')\n\n  useEffect(() => {\n    fetch('/api/session')\n      .then(response => response.json())\n      .then(result => {\n        console.log('result: ', result)\n        if (result === false) {\n        } else {\n          setIsLogin(true)\n          console.log('id: ', result.onlineAccessInfo.associated_user.id);\n          setUser(result.onlineAccessInfo.associated_user.id)\n          console.log('userid: ', user);\n          get_templates();\n        }\n      })\n  })\n\n  const get_templates = () => {\n    fetch('/api/get/' + user)\n      .then(res => res.json())\n      .then(result => {\n        console.log('templates: ', result)\n        setTemplates(result)\n      })\n  }\n\n  const exportHtml = () => {\n    emailEditorRef.current.editor.exportHtml((data) => {\n      const { design, html } = data;\n      //console.log('exportHtml', html);\n      console.log('design: ', design);\n      //design['user'] = user;\n      console.log('export for user: ', user);\n      fetch('/api/save/' + user, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(design)\n      }).then(response => response.json())\n        .then(result => console.log('save'))\n    });\n  };\n\n  const onLoad = (id) => {\n    // you can load your template here;\n    // const templateJson = {};\n    // emailEditorRef.current.editor.loadDesign(templateJson);\n    templates.map((each) => {\n      if (each._id = id) {\n        console.log('loading: ', each._id);\n        emailEditorRef.current.editor.loadDesign(each)\n      }\n    })\n  };\n\n  \n  return (\n    <div>\n    {isLogin ? \n      <div>\n        <div>\n          <button onClick={exportHtml}>Export HTML</button>\n        </div>\n        <div>\n          Saved Templates\n          {templates.map((each) => {\n            return (\n              <div>\n                <button onClick={() => onLoad(each._id)}>Template {each._id}</button>\n              </div>\n            )\n          })}\n        </div>\n      <EmailEditor\n        ref={emailEditorRef}\n        onLoad={onLoad}\n      />\n      </div>\n      \n        :\n        <a href=\"/login\">Login to continue</a> \n    }\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}